{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Dhia\\\\Desktop\\\\TestDhiaBennour\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dhia\\\\Desktop\\\\TestDhiaBennour\\\\client\\\\src\\\\components\\\\galerie.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { Input } from \"@material-ui/core\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { getImages, addImage, deleteImage } from \"../action/image.action\";\nexport class Galerie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      addModal: false,\n      name: \"\",\n      url: \"\",\n      modalImage: []\n    };\n\n    this.componentDidMount = () => {\n      const userId = this.props.match.params.userId;\n      console.log(userId);\n      this.props.getImages(userId);\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        addModal: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        addModal: false\n      });\n    };\n\n    this.intitialCloseModal = images => {\n      images && images.map(image => {\n        this.setState({\n          modalImage: this.state.modalImage.concat({\n            id: image._id,\n            show: false\n          })\n        });\n      });\n    };\n\n    this.openImageModal = id => {\n      this.setState({\n        modalImage: this.state.modalImage.map(image => {\n          return image.id === id ? _objectSpread({}, image, {\n            show: true\n          }) : _objectSpread({}, image);\n        })\n      });\n    };\n  }\n\n  render() {\n    const userId = this.props.match.params.userId;\n    const _this$props = this.props,\n          imageList = _this$props.imageList,\n          loading = _this$props.loading,\n          deleteImage = _this$props.deleteImage,\n          addImage = _this$props.addImage;\n    const _this$state = this.state,\n          search = _this$state.search,\n          addModal = _this$state.addModal,\n          name = _this$state.name,\n          link = _this$state.link,\n          modalImage = _this$state.modalImage;\n    const handleClose = this.handleClose,\n          handleOpen = this.handleOpen,\n          intitialCloseModal = this.intitialCloseModal,\n          openImageModal = this.openImageModal;\n    intitialCloseModal(imageList);\n\n    if (loading) {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"spinner\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"galeries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"galeries-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"search\",\n      onChange: e => this.setState({\n        search: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: handleOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Add photo\"), React.createElement(Modal, {\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      open: addModal,\n      onClose: handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"paper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: \"photo titre\",\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Input, {\n      placeholder: \"link\",\n      onChange: e => this.setState({\n        link: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: () => {\n        addImage(userId, {\n          name,\n          link\n        });\n        handleClose();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Add\")))), imageList && imageList.filter(image => image.name.startsWith(search)).map((image, index) => {\n      return React.createElement(Card, {\n        style: {\n          maxWidth: 345\n        },\n        className: \"galeries-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(CardActionArea, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(CardMedia, {\n        style: {\n          height: 140\n        },\n        image: image.link,\n        title: \"Contemplative Reptile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(CardActions, {\n        className: \"galerie-action-zone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        component: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, image.name), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"small\",\n        color: \"primary\",\n        onClick: () => deleteImage(userId, image._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"delete\"), React.createElement(Button, {\n        type: \"button\",\n        onClick: () => openImageModal(image._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"zooom\"), React.createElement(Modal, {\n        \"aria-labelledby\": \"simple-modal-title\",\n        \"aria-describedby\": \"simple-modal-description\",\n        open: modalImage[index] // onClose={handleClose}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"paper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"walid modal\")))));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  imageList: state.imageList,\n  loading: state.loading\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, {\n  getImages,\n  deleteImage,\n  addImage\n})(Galerie);","map":{"version":3,"sources":["C:/Users/Dhia/Desktop/TestDhiaBennour/client/src/components/galerie.js"],"names":["React","Component","connect","Modal","Card","CardActionArea","CardActions","Input","CardMedia","Button","Typography","getImages","addImage","deleteImage","Galerie","state","search","addModal","name","url","modalImage","componentDidMount","userId","props","match","params","console","log","handleOpen","setState","handleClose","intitialCloseModal","images","map","image","concat","id","_id","show","openImageModal","render","imageList","loading","link","e","target","value","filter","startsWith","index","maxWidth","height","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { getImages, addImage, deleteImage } from \"../action/image.action\";\r\n\r\nexport class Galerie extends Component {\r\n  state = {\r\n    search: \"\",\r\n    addModal: false,\r\n    name: \"\",\r\n    url: \"\",\r\n    modalImage : []\r\n  };\r\n  componentDidMount = () => {\r\n    const { userId } = this.props.match.params;\r\n    console.log(userId);\r\n    this.props.getImages(userId);\r\n  };\r\n  handleOpen = () => {\r\n    this.setState({ addModal: true });\r\n  };\r\n  \r\n  handleClose = () => {\r\n    this.setState({ addModal: false });\r\n  };\r\n  intitialCloseModal = (images) => {\r\n    images && images.map ((image )=> {\r\n        this.setState({ modalImage: this.state.modalImage.concat({id : image._id ,show : false }) });\r\n    })\r\n  }\r\n  openImageModal = (  id ) => {\r\n \r\n        this.setState({ modalImage: this.state.modalImage.map(image => {\r\n            return image.id === id ? ({...image , show : true}) : ({...image})\r\n        })  });\r\n     \r\n  }\r\n  render() {\r\n    const { userId } = this.props.match.params;\r\n    const { imageList, loading, deleteImage, addImage } = this.props;\r\n    const { search, addModal, name, link ,modalImage} = this.state;\r\n    const { handleClose, handleOpen ,intitialCloseModal,openImageModal } = this;\r\n    intitialCloseModal(imageList)\r\n    if (loading) {\r\n      return <span>spinner</span>;\r\n    }\r\n    return (\r\n      <div className=\"galeries\">\r\n        <div className=\"galeries-header\">\r\n          <Input\r\n            placeholder=\"search\"\r\n            onChange={(e) => this.setState({ search: e.target.value })}\r\n          />\r\n          <Button type=\"button\" onClick={handleOpen}>\r\n            Add photo\r\n          </Button>\r\n          <Modal\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n            open={addModal}\r\n            onClose={handleClose}>\r\n            <div className=\"paper\">\r\n              <Input\r\n                placeholder=\"photo titre\"\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n              <Input\r\n                placeholder=\"link\"\r\n                onChange={(e) => this.setState({ link: e.target.value })}\r\n              />\r\n              <Button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  addImage(userId, {\r\n                    name,\r\n                    link\r\n                  });\r\n                  handleClose();\r\n                }}>\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        {imageList &&\r\n          imageList\r\n            .filter((image) => image.name.startsWith(search))\r\n            .map((image , index) => {\r\n              return (\r\n                <Card style={{ maxWidth: 345 }} className=\"galeries-card\">\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      style={{ height: 140 }}\r\n                      image={image.link}\r\n                      title=\"Contemplative Reptile\"\r\n                    />\r\n                  </CardActionArea>\r\n                  <CardActions className=\"galerie-action-zone\">\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"p\">\r\n                      {image.name}\r\n                    </Typography>\r\n                    <div>\r\n                      <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => deleteImage(userId, image._id)}>\r\n                        delete\r\n                      </Button>\r\n               \r\n               \r\n                      <Button type=\"button\" onClick={() => openImageModal( image._id) }>\r\n            zooom\r\n          </Button>\r\n          <Modal\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n            open={modalImage[index]}\r\n            // onClose={handleClose}\r\n            >\r\n            <div className=\"paper\">\r\n      \r\n walid modal\r\n            </div>\r\n          </Modal>\r\n\r\n\r\n\r\n                    </div>\r\n                  </CardActions>\r\n                </Card>\r\n              );\r\n            })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  imageList: state.imageList,\r\n  loading: state.loading\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getImages, deleteImage, addImage }\r\n)(Galerie);\r\n"]},"metadata":{},"sourceType":"module"}